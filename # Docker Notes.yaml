# Docker Notes

# Confirms that the server side of Docker is running
docker info

# Verifies that Docker has installed correctly
# The docker run command starts an image 
docker run hello-world 
docker run [container name] [process to run in container (ie. 'bash')]

docker run --rm (the RM means 'delete this container when it exits

docker run -ti ubuntu bash -c "sleep 3; echo all done"

-d # This is detached 

docker attach [container name] # attach to a running container 

# detach from container and keep it running (ctrl + p, ctrl + q)

docker exec -ti [container name] [command to execute]

# Look at your docker images
docker images

# This is how we start the latest version of an Ubuntu image and run bash
# If you omit the latest tag, it will grab the latest by default
docker run -ti ubuntu:latest bash
-ti = (terminal interactive)

# Check what release you are running while in a linux environment
cat /etc/lsb-release

# Images and containers have different IDs 

# Take a look at running images
docker ps
# See all containers
docker ps -a 
# See the last container to exit
docker ps -l

# Take a container and make an image out of it (So you can access the files / your work again)
docker commit [container ID]

# Tag your newly created image (SHA-256 string and tag name)
docker tag 8b4a792f0234008dafdc6542920ee06585e67f297690926333428fd40cc860d1 goodbye-world

# Or, the easier way is 
docker commit [name of the container] [tag name]

----------[Container Management]----------

docker logs [container name]

#example
docker run --name example -d ubuntu bash -c "lose /etc/password"
#returns 'bash: lose: command not found'

----------[Killing and Removing containers]----------
docker kill [container name] # stops a running container
docker rm [container name] # gets rid of this container (sometimes you need to if you want to start a new one with the same name)

----------[Memory & CPU Management]----------
docker run --memory -maximum-allow-memory [image name] [command]

docker run --cpu-shares # relative to other containers
docker run --cpu-quota # Hard limit

----------[Lessons from the field]----------

    - Don't let your containers download their dependencies when they start
    - - include your dependencies inside the container
    - Don't leave important things in unnamed stopped containers
     
----------[Container Networking / Exposing Ports]-----------
- Progams in containers are isolated from the internet by default
- You can group your containers in to Private Networks
- You can explicitly choose whom can connect to whom

- Expose ports to let connections in
- Private networks to connect between containers

- Explicitly specify the port you want to use inside the container and outside
- Expose as many ports as you want
- Requires coordination between containers
- Makes it easy to find exposed ports
  
docker run --rm -ti  -p 45678:45678 -p 45679:45679 --name echo-server ubuntu:14.04 bash
# -p means publish 
# the first segment of 45678:45678 is the internal port and the second is the external 
# -p 45679:45679 is a second port we are publishing

# Net Cat (-lp = listen on port)
nc -lp 45678 |  nc -lp 45679 # (piping input from 45678 to 45679)

client 1: nc localhost 45678
(sends messages via this port)

client 2: nc localhost 45679
(recieves messages via this port)

host.docker.internal # is how you reference the mac running docker
# On a Windows machine you would use the machine's IP address or a DNS name 
#(docker container port : Docker Host port)
ex. $ nc host.docker.internal 45678 

docker port [container name] # Returns information about the respective machine
 
----------[Exposing UDP Ports]-----------

docker run -p [outside port:inside port/protocol (tcp.udp)]
docker run -p 1234:1234/udp

----------[More Networking]-----------

docker network ls # show which networks are available 
- bridge is used by networks between containers that won't used by any other networks
- host is when you want a container to not have any network isolation at all
- none is when a container should have no Networking

docker network create [netword name]

docker run --rm -ti --net [network name] --name [container name] 

ping [server name on network]

docker network connect [network name] [container name]
 